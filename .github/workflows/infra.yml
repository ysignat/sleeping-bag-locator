name: Main flow for infrastructure deployment
on:
  push:
    branches:
      - main
    paths:
      - infra/**
      - .github/workflows/infra.yml
env:
  TERRAFORM_VERSION: ~> 1.9.5
  AWS_ACCESS_KEY: ${{ secrets.YANDEX_CLOUD_TERRAFORM_S3_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.YANDEX_CLOUD_TERRAFORM_S3_SECRET_KEY }}
  GITHUB_TOKEN: ${{ secrets.GH_TERRAFORM_TOKEN }}
  SPECS_PATH: infra/
jobs:
  plan:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Initialize terraform workspace
        id: init
        run: >-
          terraform
          -chdir=${{ env.SPECS_PATH }}
          init
          -no-color
        continue-on-error: true
      - name: Issue IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YANDEX_CLOUD_TERRAFORM_INFRA_KEY }}
      - name: Create plan
        id: plan
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        run: >-
          terraform
          -chdir=${{ env.SPECS_PATH }}
          plan
          -no-color
          -input=false
        continue-on-error: true
      - name: Add results to summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            function outcomeIntoEmoji(outcome) {
              return outcome == 'success' ? '✅' : '❌'
            }
            core.summary.addHeading('Brief', '3')
            const brief = [
              [{data: 'Step', header: true}, {data: 'Status', header: true}],
              [{data: 'Init'}, {data: outcomeIntoEmoji('${{ steps.init.outcome }}')}],
              [{data: 'Plan'}, {data: outcomeIntoEmoji('${{ steps.plan.outcome }}')}],
            ]
            core.summary.addTable(brief)

            core.summary.addRaw('<details><summary>Verbose Output</summary>')

            function outputIntoCode(output) {
              return output == '' ? '-' : output
            }
            
            core.summary.addHeading('Initialization Output', '3')
            core.summary.addHeading('OUT', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.init.outputs.stdout }}`))
            core.summary.addHeading('ERR', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.init.outputs.stderr }}`))

            core.summary.addHeading('Plan', '3')
            core.summary.addHeading('OUT', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.plan.outputs.stdout }}`))
            core.summary.addHeading('ERR', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.plan.outputs.stderr }}`))

            core.summary.addRaw('</details>')

            core.summary.write()
      - name: Combined result of previous steps
        run: |-
          if \
            [ ${{ steps.init.outputs.exitcode }} -eq 1 ] || \
            [ ${{ steps.plan.outputs.exitcode }} -eq 1 ]
          then
            exit 1
          fi
  apply:
    permissions:
      contents: read
    needs: 
      - plan
    runs-on: ubuntu-22.04
    environment: infra-review
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Initialize terraform workspace
        id: init
        run: >- 
          terraform
          -chdir=${{ env.SPECS_PATH }}
          init
          -no-color
        continue-on-error: true
      - name: Issue IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YANDEX_CLOUD_TERRAFORM_INFRA_KEY }}
      - name: Apply plan
        id: apply
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        run: >-
            terraform
            -chdir=${{ env.SPECS_PATH }}
            apply
            -auto-approve
            -input=false
            -no-color
        continue-on-error: true
      - name: Add results to summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            function outcomeIntoEmoji(outcome) {
              return outcome == 'success' ? '✅' : '❌'
            }
            core.summary.addHeading('Brief', '3')
            const brief = [
              [{data: 'Step', header: true}, {data: 'Status', header: true}],
              [{data: 'Init'}, {data: outcomeIntoEmoji('${{ steps.init.outcome }}')}],
              [{data: 'Apply'}, {data: outcomeIntoEmoji('${{ steps.apply.outcome }}')}],
            ]
            core.summary.addTable(brief)

            core.summary.addRaw('<details><summary>Verbose Output</summary>')

            function outputIntoCode(output) {
              return output == '' ? '-' : output
            }
            
            core.summary.addHeading('Initialization Output', '3')
            core.summary.addHeading('OUT', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.init.outputs.stdout }}`))
            core.summary.addHeading('ERR', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.init.outputs.stderr }}`))

            core.summary.addHeading('Plan', '3')
            core.summary.addHeading('OUT', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.apply.outputs.stdout }}`))
            core.summary.addHeading('ERR', '4')
            core.summary.addCodeBlock(outputIntoCode(`${{ steps.apply.outputs.stderr }}`))

            core.summary.addRaw('</details>')

            core.summary.write()
      - name: Combined result of previous steps
        run: |-
          if \
            [ ${{ steps.init.outputs.exitcode }} -eq 1 ] || \
            [ ${{ steps.apply.outputs.exitcode }} -eq 1 ]
          then
            exit 1
          fi
    