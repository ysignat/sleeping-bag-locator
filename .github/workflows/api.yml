name: Pull request API checks and deployment
on:
  push:
    branches:
      # - main
      - feature/separate-pr-and-release-flows-for-api
    paths:
      - src/**
      - Cargo.*
      - Dockerfile
      - .github/workflows/api.yml
      - deploy/**
env:
  BUILD_ROOT: dist
  AWS_ACCESS_KEY: ${{ secrets.YANDEX_CLOUD_TERRAFORM_S3_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.YANDEX_CLOUD_TERRAFORM_S3_SECRET_KEY }}
  SPECS_PATH: deploy/
  GITHUB_REGISTRY_TAG: ${{ vars.GH_REGISTRY }}/${{ github.repository }}/${{ vars.API_ARTIFACT_NAME }}:beta-${{ github.run_id }}
  YANDEX_CLOUD_REGISTRY_TAG: 
    ${{ vars.YANDEX_CLOUD_REGISTRY }}/${{ vars.YANDEX_CLOUD_REGISTRY_ID }}/${{ vars.API_ARTIFACT_NAME }}:beta-${{ github.run_id }}
jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    env:
      TOOLCHAIN: 1.80.1-x86_64-unknown-linux-gnu
      TARGET: x86_64-unknown-linux-musl    
    steps:
      - uses: actions/checkout@v4
      - name: Install musl-tools
        env:
          DEBIAN_FRONTEND: non-interactive
          MUSL_TOOLS_VERSION: 1.2.2-4
        run:
          sudo apt-get install musl-tools=${{ env.MUSL_TOOLS_VERSION }}
      - name: Install toolchain
        run:
          rustup toolchain install ${{ env.TOOLCHAIN }}
      - name: Add musl target
        run: >-
          rustup target add
          --toolchain ${{ env.TOOLCHAIN }}
          ${{ env.TARGET }}
      - name: Build artifact
        run: >-
          cargo
          +${{ env.TOOLCHAIN }}
          install
          --profile release
          --target ${{ env.TARGET }}
          --root ${{ env.BUILD_ROOT }}
          --bin ${{ vars.API_ARTIFACT_NAME }}
          --path .
          --locked
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.API_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ROOT }}

  publish-image:
    runs-on: ubuntu-22.04
    needs:
      - build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.API_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ROOT }}
      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the Yandex Cloud container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.YANDEX_CLOUD_REGISTRY }}
          username: json_key
          password: ${{ secrets.YANDEX_CLOUD_REGISTRY_KEY }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        env:
          SRC_BINARY_PATH: bin/${{ vars.API_ARTIFACT_NAME }}
          ALPINE_VERSION: "3.20"
        with:
          push: true
          file: ${{ github.workspace }}/Dockerfile
          tags: |-
            ${{ env.GITHUB_REGISTRY_TAG }}
            ${{ env.YANDEX_CLOUD_REGISTRY_TAG }}
          build-args: |-
            SRC_BINARY_PATH=${{ env.SRC_BINARY_PATH }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          context: ${{ env.BUILD_ROOT }}
  plan:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    needs:
      - publish-image
    steps:
      - uses: actions/checkout@v4
      - name: Issue IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YANDEX_CLOUD_TERRAFORM_INFRA_KEY }}
      - uses: ./.github/actions/terraform/
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
          TF_VAR_image: ${{ env.YANDEX_CLOUD_REGISTRY_TAG }}
          TF_VAR_service_account_id: ${{ vars.YANDEX_CLOUD_DEPLOY_SERVICE_ACCOUNT_ID }}
        with:
          command: plan
          args: >-
            -no-color
            -input=false
          version: ${{ vars.TERRAFORM_VERSION }}          
          chdir: ${{ env.SPECS_PATH }}  
          gh-summary-token: ${{ secrets.GITHUB_TOKEN }}
  apply:
    permissions:
      contents: read
    needs: 
      - plan
    runs-on: ubuntu-22.04
    environment: api-review
    steps:
      - uses: actions/checkout@v4
      - name: Issue IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YANDEX_CLOUD_TERRAFORM_INFRA_KEY }}
      - uses: ./.github/actions/terraform/
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
          TF_VAR_image: ${{ env.YANDEX_CLOUD_REGISTRY_TAG }}
          TF_VAR_service_account_id: ${{ vars.YANDEX_CLOUD_DEPLOY_SERVICE_ACCOUNT_ID }}
        with:
          command: apply
          args: >-
            -no-color
            -input=false
            -auto-approve
          version: ${{ vars.TERRAFORM_VERSION }}          
          chdir: ${{ env.SPECS_PATH }}  
          gh-summary-token: ${{ secrets.GITHUB_TOKEN }}
